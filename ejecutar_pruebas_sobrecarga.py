"""
Script principal para ejecutar todas las pruebas de sobrecarga
Divide y Vencer√°s vs Algoritmo Voraz
"""

import sys
import os
import time

def mostrar_menu():
    """Muestra el men√∫ principal de pruebas de sobrecarga"""
    print("\n" + "="*80)
    print("PRUEBAS DE SOBRECARGA Y ESTR√âS")
    print("Planificaci√≥n de Horarios: Divide y Vencer√°s vs Algoritmo Voraz")
    print("="*80)
    print("\nOpciones disponibles:")
    print("1. Ejecutar pruebas de Divide y Vencer√°s")
    print("2. Ejecutar pruebas de Algoritmo Voraz")
    print("3. Ejecutar comparaci√≥n directa entre algoritmos")
    print("4. Ejecutar todas las pruebas (completo)")
    print("5. Mostrar informaci√≥n sobre las pruebas")
    print("6. Salir")
    print("\n" + "="*80)

def mostrar_informacion():
    """Muestra informaci√≥n detallada sobre las pruebas"""
    print("\n" + "="*80)
    print("INFORMACI√ìN SOBRE LAS PRUEBAS DE SOBRECARGA")
    print("="*80)
    
    print("""
    üéØ OBJETIVOS DE LAS PRUEBAS DE SOBRECARGA:
    
    1. Medir la eficiencia del algoritmo con vol√∫menes grandes de entrada
       - Evaluar rendimiento con 10, 25, 50, 100, 200, 300, 500, 750, 1000+ clases
       - Analizar comportamiento con diferentes configuraciones de aulas
    
    2. Verificar c√≥mo escala el rendimiento con el aumento gradual de la carga
       - Identificar patrones de crecimiento temporal y espacial
       - Determinar puntos de inflexi√≥n en el rendimiento
    
    3. Identificar cuellos de botella en el procesamiento
       - Analizar uso de memoria y CPU
       - Detectar limitaciones espec√≠ficas de cada algoritmo
       - Evaluar eficiencia de estructuras de datos utilizadas
    
    üìä M√âTRICAS EVALUADAS:
    
    M√©tricas Generales:
    - Tiempo de ejecuci√≥n (segundos)
    - Uso de memoria (MB)
    - Clases asignadas (eficiencia)
    - Eficiencia (clases por segundo)
    
    M√©tricas Espec√≠ficas de Divide y Vencer√°s:
    - Llamadas recursivas
    - Niveles m√°ximos de recursi√≥n
    - Divisiones realizadas
    - Comportamiento recursivo
    
    M√©tricas Espec√≠ficas de Algoritmo Voraz:
    - Iteraciones del algoritmo
    - Asignaciones exitosas/fallidas
    - Mejoras locales
    - Criterios aplicados
    
    üìà VISUALIZACIONES GENERADAS:
    
    Para Divide y Vencer√°s:
    - sobrecarga_divide_venceras.png
    - analisis_logaritmico_dv.png
    
    Para Algoritmo Voraz:
    - sobrecarga_algoritmo_voraz.png
    - analisis_detallado_greedy.png
    
    Para Comparaci√≥n:
    - comparacion_sobrecarga_algoritmos.png
    - analisis_equilibrio_algoritmos.png
    
    ‚è±Ô∏è  TIEMPO ESTIMADO DE EJECUCI√ìN:
    - Pruebas individuales: 5-10 minutos
    - Comparaci√≥n completa: 10-15 minutos
    - Todas las pruebas: 20-30 minutos
    
    üíæ RECURSOS NECESARIOS:
    - Memoria: 200-500 MB durante las pruebas
    - Espacio en disco: 50-100 MB para gr√°ficas
    - CPU: Uso intensivo durante las pruebas
    """)

def ejecutar_divide_venceras():
    """Ejecuta las pruebas de Divide y Vencer√°s"""
    print("\n" + "="*60)
    print("EJECUTANDO PRUEBAS DE DIVIDE Y VENCER√ÅS")
    print("="*60)
    print("Esto puede tomar 5-10 minutos...")
    print()
    
    try:
        from divide_venceras import main as dv_main
        dv_main()
        print("\n‚úÖ Pruebas de Divide y Vencer√°s completadas exitosamente!")
        
    except ImportError as e:
        print(f"‚ùå Error al importar m√≥dulo de Divide y Vencer√°s: {e}")
        print("Aseg√∫rate de que el archivo divide_venceras.py est√© presente")
    except Exception as e:
        print(f"‚ùå Error durante las pruebas de Divide y Vencer√°s: {e}")

def ejecutar_algoritmo_voraz():
    """Ejecuta las pruebas de Algoritmo Voraz"""
    print("\n" + "="*60)
    print("EJECUTANDO PRUEBAS DE ALGORITMO VORAZ")
    print("="*60)
    print("Esto puede tomar 5-10 minutos...")
    print()
    
    try:
        from algoritmo_voraz import main as greedy_main
        greedy_main()
        print("\n‚úÖ Pruebas de Algoritmo Voraz completadas exitosamente!")
        
    except ImportError as e:
        print(f"‚ùå Error al importar m√≥dulo de Algoritmo Voraz: {e}")
        print("Aseg√∫rate de que el archivo algoritmo_voraz.py est√© presente")
    except Exception as e:
        print(f"‚ùå Error durante las pruebas de Algoritmo Voraz: {e}")

def ejecutar_comparacion():
    """Ejecuta la comparaci√≥n directa entre algoritmos"""
    print("\n" + "="*60)
    print("EJECUTANDO COMPARACI√ìN DIRECTA ENTRE ALGORITMOS")
    print("="*60)
    print("Esto puede tomar 10-15 minutos...")
    print()
    
    try:
        from comparacion_algoritmos import main as comp_main
        comp_main()
        print("\n‚úÖ Comparaci√≥n entre algoritmos completada exitosamente!")
        
    except ImportError as e:
        print(f"‚ùå Error al importar m√≥dulo de comparaci√≥n: {e}")
        print("Aseg√∫rate de que el archivo comparacion_algoritmos.py est√© presente")
    except Exception as e:
        print(f"‚ùå Error durante la comparaci√≥n: {e}")

def ejecutar_todas_las_pruebas():
    """Ejecuta todas las pruebas de sobrecarga"""
    print("\n" + "="*60)
    print("EJECUTANDO TODAS LAS PRUEBAS DE SOBRECARGA")
    print("="*60)
    print("Esto puede tomar 20-30 minutos...")
    print("Se ejecutar√°n en el siguiente orden:")
    print("1. Pruebas de Divide y Vencer√°s")
    print("2. Pruebas de Algoritmo Voraz")
    print("3. Comparaci√≥n directa entre algoritmos")
    print()
    
    inicio_total = time.time()
    
    # Ejecutar Divide y Vencer√°s
    print("üîÑ FASE 1: Pruebas de Divide y Vencer√°s")
    ejecutar_divide_venceras()
    
    # Ejecutar Algoritmo Voraz
    print("\nüîÑ FASE 2: Pruebas de Algoritmo Voraz")
    ejecutar_algoritmo_voraz()
    
    # Ejecutar Comparaci√≥n
    print("\nüîÑ FASE 3: Comparaci√≥n directa entre algoritmos")
    ejecutar_comparacion()
    
    fin_total = time.time()
    tiempo_total = fin_total - inicio_total
    
    print("\n" + "="*60)
    print("TODAS LAS PRUEBAS COMPLETADAS")
    print("="*60)
    print(f"‚è±Ô∏è  Tiempo total de ejecuci√≥n: {tiempo_total/60:.1f} minutos")
    print("\nüìä Archivos generados:")
    print("- sobrecarga_divide_venceras.png")
    print("- analisis_logaritmico_dv.png")
    print("- sobrecarga_algoritmo_voraz.png")
    print("- analisis_detallado_greedy.png")
    print("- comparacion_sobrecarga_algoritmos.png")
    print("- analisis_equilibrio_algoritmos.png")
    print("\n‚úÖ Todas las pruebas de sobrecarga han sido ejecutadas exitosamente!")

def verificar_dependencias():
    """Verifica que todas las dependencias est√©n disponibles"""
    print("Verificando dependencias...")
    
    dependencias = [
        ('matplotlib', 'matplotlib'),
        ('numpy', 'numpy'),
        ('psutil', 'psutil')
    ]
    
    faltantes = []
    for nombre, modulo in dependencias:
        try:
            __import__(modulo)
            print(f"‚úÖ {nombre} - OK")
        except ImportError:
            print(f"‚ùå {nombre} - FALTANTE")
            faltantes.append(nombre)
    
    if faltantes:
        print(f"\n‚ö†Ô∏è  Dependencias faltantes: {', '.join(faltantes)}")
        print("Instala las dependencias faltantes con:")
        print("pip install " + " ".join(faltantes))
        return False
    
    print("\n‚úÖ Todas las dependencias est√°n disponibles")
    return True

def main():
    """Funci√≥n principal"""
    
    print("PRUEBAS DE SOBRECARGA Y ESTR√âS")
    print("Planificaci√≥n de Horarios: Divide y Vencer√°s vs Algoritmo Voraz")
    
    # Verificar dependencias
    if not verificar_dependencias():
        print("\n‚ùå No se pueden ejecutar las pruebas sin las dependencias necesarias")
        return
    
    while True:
        mostrar_menu()
        
        try:
            opcion = input("\nSelecciona una opci√≥n (1-6): ").strip()
            
            if opcion == "1":
                ejecutar_divide_venceras()
                
            elif opcion == "2":
                ejecutar_algoritmo_voraz()
                
            elif opcion == "3":
                ejecutar_comparacion()
                
            elif opcion == "4":
                ejecutar_todas_las_pruebas()
                
            elif opcion == "5":
                mostrar_informacion()
                
            elif opcion == "6":
                print("\n¬°Gracias por usar el sistema de pruebas de sobrecarga!")
                print("Trabajo completado exitosamente.")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida. Por favor, selecciona una opci√≥n del 1 al 6.")
                
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Operaci√≥n cancelada por el usuario.")
            break
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            print("Por favor, intenta nuevamente.")
        
        input("\nPresiona Enter para continuar...")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        sys.exit(1)

